name: CI
env:
  DEBUG: napi:*
  APP_NAME: whisper
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: '1'
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
            build: |
              brew install nasm meson ninja
              cargo run -p build_dav1d
              pnpm build --target x86_64-apple-darwin -vvv
          # - host: windows-latest
          #   build: pnpm build --target x86_64-pc-windows-msvc
          #   target: x86_64-pc-windows-msvc
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install meson ninja-build -y
            build: |
              cargo run -p build_dav1d
              pnpm build --target x86_64-unknown-linux-gnu
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              brew install meson ninja
              cargo run -p build_dav1d
              pnpm build --target aarch64-apple-darwin
          # - host: ubuntu-latest
          #   target: wasm32-wasip1-threads
          #   build: pnpm build --target wasm32-wasip1-threads
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.13.0
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: pnpm install
      - name: Free Disk Space (Ubuntu)
        if: matrix.settings.target == 'x86_64-unknown-linux-gnu'
        uses: jlumbroso/free-disk-space@main
        with:
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: 'Setup rocm'
        if: matrix.settings.target == 'x86_64-unknown-linux-gnu'
        run: node --import @oxc-node/core/register ./scripts/get-rocm.ts --rocm-version 6.2.2 --sudo
      - uses: ilammy/setup-nasm@v1
        if: matrix.settings.target == 'x86_64-unknown-linux-gnu'
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          cache: pnpm
          architecture: x86
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: matrix.settings.target != 'wasm32-wasip1-threads'
        with:
          name: bindings-${{ matrix.settings.target }}
          path: '*.node'
          if-no-files-found: error

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: matrix.settings.target == 'wasm32-wasip1-threads'
        with:
          name: bindings-${{ matrix.settings.target }}
          path: '*.wasm'
          if-no-files-found: error

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          # - host: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   architecture: x64
          - host: macos-13
            target: x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
        node:
          - '18'
          - '20'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Download model
        run: ./scripts/download-ggml-model.js tiny
      - name: Test bindings
        run: pnpm test
  # test-linux-binding:
  #   name: Test ${{ matrix.target }} - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target:
  #         - x86_64-unknown-linux-gnu
  #       node:
  #         - '18'
  #         - '20'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: setup pnpm
  #       uses: pnpm/action-setup@v4
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #         cache: pnpm
  #     - name: Output docker params
  #       id: docker
  #       run: |
  #         node -e "
  #           if ('${{ matrix.target }}'.startsWith('aarch64')) {
  #             console.log('PLATFORM=linux/arm64')
  #           } else if ('${{ matrix.target }}'.startsWith('armv7')) {
  #             console.log('PLATFORM=linux/arm/v7')
  #           } else {
  #             console.log('PLATFORM=linux/amd64')
  #           }
  #         " >> $GITHUB_OUTPUT
  #         node -e "
  #           if ('${{ matrix.target }}'.endsWith('-musl')) {
  #             console.log('IMAGE=node:${{ matrix.node }}-alpine')
  #           } else {
  #             console.log('IMAGE=node:${{ matrix.node }}-slim')
  #           }
  #         " >> $GITHUB_OUTPUT
  #         echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
  #     # use --force to download the all platform/arch dependencies
  #     - name: Install dependencies
  #       run: pnpm install --force
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-${{ matrix.target }}
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #       with:
  #         platforms: all
  #     - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  #     - name: Test bindings
  #       continue-on-error: true
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: ${{ steps.docker.outputs.IMAGE }}
  #         options: -v ${{ steps.docker.outputs.PNPM_STORE_PATH }}:${{ steps.docker.outputs.PNPM_STORE_PATH }} -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}
  #         run: npm run test
  # test-wasi:
  #   name: Test WASI target
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: setup pnpm
  #       uses: pnpm/action-setup@v4
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: pnpm
  #     - name: Install dependencies
  #       run: pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-wasm32-wasip1-threads
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: pnpm test
  #       env:
  #         NAPI_RS_FORCE_WASI: 1
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-macOS-windows-binding
      # - test-linux-binding
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: create npm dirs
        run: pnpm napi create-npm-dirs
      - name: Move artifacts
        run: pnpm artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^v\?[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
