/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Whisper {
  /** Largest language id (i.e. number of available languages - 1) */
  static maxLangId(): number
  /**
   * Return the id of the specified language, returns -1 if not found
   * Examples:
   *   "de" -> 2
   *   "german" -> 2
   */
  static langId(lang: string): number
  /** Return the short string of the specified language id (e.g. 2 -> "de"), returns None if not found */
  static lang(id: number): string | null
  /** Return the short string of the specified language name (e.g. 2 -> "german"), returns nullptr if not found */
  static langFull(id: number): string | null
  constructor(model: Uint8Array, params?: WhisperContextParams | undefined | null)
  /** mel length */
  get nLen(): number
  get nVocab(): number
  get nText(): number
  get nAudio(): number
  get isMultilingual(): number
  get modelNVocab(): number
  get modelNAudioCtx(): number
  get modelNAudioState(): number
  get modelNAudioHead(): number
  get modelNAudioLayer(): number
  get modelNTextCtx(): number
  get modelNTextState(): number
  get modelNTextHead(): number
  get modelNTextLayer(): number
  get modelNMels(): number
  get modelFtype(): number
  get modelType(): number
  /** Language id associated with the context's default state */
  get fullLangId(): number
  get state(): WhisperState | null
  /** Return the number of tokens in the provided text */
  count(): number
  full(parmas: WhisperFullParams, samples: Float32Array): string
}

/** Parameters for the whisper_full() function */
export declare class WhisperFullParams {
  constructor(samplingStrategy: WhisperSamplingStrategy)
  get strategy(): WhisperSamplingStrategy
  set strategy(strategy: WhisperSamplingStrategy)
  get nThreads(): number
  set nThreads(nThreads: number)
  get nMaxTextCtx(): number
  set nMaxTextCtx(value: number)
  get offsetMs(): number
  set offsetMs(value: number)
  get durationMs(): number
  set durationMs(value: number)
  get translate(): boolean
  set translate(value: boolean)
  get noContext(): boolean
  set noContext(value: boolean)
  get noTimestamps(): boolean
  set noTimestamps(value: boolean)
  get singleSegment(): boolean
  set singleSegment(value: boolean)
  get printSpecial(): boolean
  set printSpecial(value: boolean)
  get printProgress(): boolean
  set printProgress(value: boolean)
  get printRealtime(): boolean
  set printRealtime(value: boolean)
  get printTimestamps(): boolean
  set printTimestamps(value: boolean)
  get tokenTimestamps(): boolean
  set tokenTimestamps(value: boolean)
  get tholdPt(): number
  set tholdPt(value: number)
  get tholdPtsum(): number
  set tholdPtsum(value: number)
  get maxLen(): number
  set maxLen(value: number)
  get splitOnWord(): boolean
  set splitOnWord(value: boolean)
  get maxTokens(): number
  set maxTokens(value: number)
  get debugMode(): boolean
  set debugMode(value: boolean)
  get audioCtx(): number
  set audioCtx(value: number)
  get tdrzEnable(): boolean
  set tdrzEnable(value: boolean)
  get suppressRegex(): string
  set suppressRegex(value: string)
  get language(): string
  set language(value: string)
  get onEncoderBegin(): (arg: Segment) => void
  set onEncoderBegin(callback: (arg: WhisperState) => void)
  get onProgress(): (arg: number) => void
  set onProgress(callback: (arg: number) => void)
  get onNewSegment(): (arg: Segment) => void
  set onNewSegment(callback: (arg: Segment) => void)
  get onAbort(): () => void
  set onAbort(callback: () => void)
}

export declare class WhisperState {
  /** Language id associated with the provided state */
  get fullLangId(): number
  /** mel length */
  get nLen(): number
}

export declare enum AVLogLevel {
  Quiet = -8,
  Panic = 0,
  Fatal = 8,
  Error = 16,
  Warning = 24,
  Info = 32,
  Verbose = 40,
  Debug = 48,
  Trace = 56
}

export declare function decodeAudio(buf: Uint8Array, filename?: string | undefined | null): Float32Array

export declare function decodeAudioAsync(buf: Uint8Array, filename?: string | undefined | null, signal?: AbortSignal | undefined | null): Promise<Float32Array>

export interface Segment {
  text: string
  start: number
  end: number
}

export declare function setupLogger(callback: (arg0: WhisperLogLevel, arg1: string) => void): void

export declare function splitAudioFromVideo(filepath: string, logLevel?: AVLogLevel | undefined | null): Float32Array

export declare enum WhisperAlignmentHeadsPreset {
  None = 0,
  NTopMost = 1,
  Custom = 2,
  TinyEn = 3,
  Tiny = 4,
  BaseEn = 5,
  Base = 6,
  SmallEn = 7,
  Small = 8,
  MediumEn = 9,
  Medium = 10,
  LargeV1 = 11,
  LargeV2 = 12,
  LargeV3 = 13
}

export interface WhisperBeamSearchParams {
  beamSize: number
  patience: number
}

export interface WhisperContextParams {
  useGpu: boolean
  flashAttn: boolean
  gpuDevice: number
  /** [EXPERIMENTAL] Token-level timestamps with DTW */
  dtwTokenTimestamps: boolean
  dtwAheadsPreset: WhisperAlignmentHeadsPreset
  dtwNTop: number
}

export interface WhisperGreedyParams {
  bestOf: number
}

export declare enum WhisperLogLevel {
  None = 0,
  Info = 1,
  Warn = 2,
  Error = 3,
  Debug = 4,
  Cont = 5
}

export declare enum WhisperSamplingStrategy {
  Greedy = 0,
  BeamSearch = 1
}
